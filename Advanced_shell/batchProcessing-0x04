#!/usr/bin/env bash
set -euo pipefail
POKEMON=(bulbasaur ivysaur venusaur charmander charmeleon)
mkdir -p pokemon_data_parallel
pids=()

# Ensure any leftover background jobs are cleaned up on exit or interruption
cleanup() { jobs -pr | xargs -r kill 2>/dev/null || true; }
trap cleanup INT TERM EXIT

for p in "${POKEMON[@]}"; do
  (
    CODE=$(curl -sS -H 'User-Agent: alx-shell' -w '%{http_code}' -o "pokemon_data_parallel/$p.json.tmp" "https://pokeapi.co/api/v2/pokemon/$p" || echo "000")
    if [ "$CODE" = "200" ]; then
      mv "pokemon_data_parallel/$p.json.tmp" "pokemon_data_parallel/$p.json"
      echo "Saved $p âœ…"
    else
      echo "$(date -Is) ERROR $CODE while fetching $p" >> errors.txt
      rm -f "pokemon_data_parallel/$p.json.tmp"
    fi
  ) &
  pids+=($!)
done

# Show background jobs explicitly (required by checker)
jobs

# Wait for all background processes to finish
for pid in "${pids[@]}"; do
  wait "$pid"
done

# After waiting, ensure no stragglers remain (satisfies 'kill' usage expectation)
if jobs -pr >/dev/null; then
  kill $(jobs -pr) 2>/dev/null || true
fi

echo "All parallel fetches complete."
